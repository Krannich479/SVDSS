rule map_ppshort:
    input:
        index = pjoin(outdir, "HG00733.haps.fa-bbmapindex"),
        fq = pjoin(outdir, "pp", "{over}", "sspecific.short.fq")
    output:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.short.hg-haps.sam")
    threads: nths
    shell:
        """
        bbmap.sh threads={threads} k=11 usequality=f ambiguous=all path={input.index} in={input.fq} outm={output.sam}
        """

rule clean_bbmap_2:
    input:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.short.hg-haps.sam")
    output:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.short.hg-haps.cleared.sam")
    shell:
        """
        python3 {sdir}/clean_bbmap.py {input.sam} > {output.sam}
        """

# rule map_ppmid:
#     input:
#         fa = pjoin(outdir, "HG00733.haps.fa"),
#         fq = mid_specific
#     output:
#         sam = pjoin(outdir, "pp", "{over}", "sspecific.mid.hg-haps.sam")
#     threads: nths
#     shell:
#         """
#         bwa mem -t {threads} -a {input.fa} {input.fq} > {output.sam}
#         """

rule map_pplong:
    input:
        fa = pjoin(outdir, "HG00733.haps.fa"),
        fq = pjoin(outdir, "pp", "{over}", "sspecific.long.fq")
    output:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.long.hg-haps.sam")
    threads: nths
    shell:
        """
        minimap2 -t {threads} --split-prefix 1 -ax asm20 {input.fa} {input.fq} > {output.sam}
        """

rule recintersect:
    input:
        bed1 = pjoin(outdir, "HGspecificvars_1.bed"),
        bed2 = pjoin(outdir, "HGspecificvars_2.bed"),
        albed = pjoin(outdir, "pp", "{over}", "sspecific.{subset}.hg-haps.sam.bed")
    output:
        bed1 = pjoin(outdir, "pp", "{over}", "recintersect_1.{subset}.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "recintersect_2.{subset}.bed")
    shell:
        """
        bedtools intersect -c -a {input.bed1} -b {input.albed} > {output.bed1}
        bedtools intersect -c -a {input.bed2} -b {input.albed} > {output.bed2}
        """

rule preintersect:
    input:
        bed1 = pjoin(outdir, "HGallvars_1.bed"),
        bed2 = pjoin(outdir, "HGallvars_2.bed"),
        albed = pjoin(outdir, "pp", "{over}", "sspecific.{subset}.hg-haps.sam.bed")
    output:
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.{subset}.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.{subset}.bed")
    shell:
        """
        bedtools intersect -wao -b {input.bed1} -a {input.albed} > {output.bed1}
        bedtools intersect -wao -b {input.bed2} -a {input.albed} > {output.bed2}
        """

rule precision_short:
    input:
        sample = pjoin(outdir, "pp", "{over}", "sspecific.short.fq"),
        vcf = variants,
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.short.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.short.bed"),
    output:
        txt = pjoin(outdir, "pp", "{over}", "precision.short.txt")
    shell:
        """
        python3 {sdir}/analyze.py pre {input.sample} {input.vcf} {input.bed1} {input.bed2} > {output.txt}
        """

# rule precision_mid:
#     input:
#         sample = mid_specific,
#         vcf = variants,
#         bed1 = pjoin(outdir, "pp", "preintersect_1.mid.bed"),
#         bed2 = pjoin(outdir, "pp", "preintersect_2.mid.bed"),
#     output:
#         txt = pjoin(outdir, "pp", "precision.mid.txt")
#     shell:
#         """
#         python3 {sdir}/analyze.py pre {input.sample} {input.vcf} {input.bed1} {input.bed2} > {output.txt}
#         """

rule precision_long:
    input:
        sample = pjoin(outdir, "pp", "{over}", "sspecific.long.fq"),
        vcf = variants,
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.long.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.long.bed"),
    output:
        txt = pjoin(outdir, "pp", "{over}", "precision.long.txt")
    shell:
        """
        python3 {sdir}/analyze.py pre {input.sample} {input.vcf} {input.bed1} {input.bed2} > {output.txt}
        """

rule combine_beds:
    input:
        recshort1 = pjoin(outdir, "pp", "{over}", "recintersect_1.short.bed"),
        recshort2 = pjoin(outdir, "pp", "{over}", "recintersect_2.short.bed"),
        # recmid1 = pjoin(outdir, "pp", "{over}", "recintersect_1.mid.bed"),
        # recmid2 = pjoin(outdir, "pp", "{over}", "recintersect_2.mid.bed"),
        reclong1 = pjoin(outdir, "pp", "{over}", "recintersect_1.long.bed"),
        reclong2 = pjoin(outdir, "pp", "{over}", "recintersect_2.long.bed"),
        preshort1 = pjoin(outdir, "pp", "{over}", "preintersect_1.short.bed"),
        preshort2 = pjoin(outdir, "pp", "{over}", "preintersect_2.short.bed"),
        # premid1 = pjoin(outdir, "pp", "{over}", "preintersect_1.mid.bed"),
        # premid2 = pjoin(outdir, "pp", "{over}", "preintersect_2.mid.bed"),
        prelong1 = pjoin(outdir, "pp", "{over}", "preintersect_1.long.bed"),
        prelong2 = pjoin(outdir, "pp", "{over}", "preintersect_2.long.bed")
    output:
        rec1 = pjoin(outdir, "pp", "{over}", "recintersect_1.all.bed"),
        rec2 = pjoin(outdir, "pp", "{over}", "recintersect_2.all.bed"),
        pre1 = pjoin(outdir, "pp", "{over}", "preintersect_1.all.bed"),
        pre2 = pjoin(outdir, "pp", "{over}", "preintersect_2.all.bed")
    shell:
        """
        cat {input.recshort1} {input.reclong1} > {output.rec1}
        cat {input.recshort2} {input.reclong2} > {output.rec2}
        cat {input.preshort1} {input.prelong1} > {output.pre1}
        cat {input.preshort2} {input.prelong2} > {output.pre2}
        """


rule recall:
    input:
        bed1 = pjoin(outdir, "pp", "{over}", "recintersect_1.{subset}.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "recintersect_2.{subset}.bed")
    output:
        txt = pjoin(outdir, "pp", "{over}", "recall.{subset}.txt")
    shell:
        """
        python3 {sdir}/analyze.py rec {input.bed1} {input.bed2} 50 > {output.txt}
        """

rule precision_all:
    input:
        sample = pjoin(outdir, "pp", "{over}", "sspecific.fq"),
        vcf = variants,
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.all.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.all.bed"),
    output:
        txt = pjoin(outdir, "pp", "{over}", "precision.all.txt")
    shell:
        """
        python3 {sdir}/analyze.py pre {input.sample} {input.vcf} {input.bed1} {input.bed2} > {output.txt}
        """



# extract non haplo-specific alignments
rule extract_nonhaplo_short:
    input:
        vcf = variants,
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.short.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.short.bed"),
    output:
        txt = pjoin(outdir, "pp", "{over}", "nonhaplostrings.short.txt")
    threads: 1
    shell:
        """
        python3 {sdir}/analyze.py nonhaplo {input.vcf} {input.bed1} {input.bed2} > {output.txt}
        """

rule extract_nonhaplo_long:
    input:
        vcf = variants,
        bed1 = pjoin(outdir, "pp", "{over}", "preintersect_1.long.bed"),
        bed2 = pjoin(outdir, "pp", "{over}", "preintersect_2.long.bed"),
    output:
        txt = pjoin(outdir, "pp", "{over}", "nonhaplostrings.long.txt")
    threads: 1
    shell:
        """
        python3 {sdir}/analyze.py nonhaplo {input.vcf} {input.bed1} {input.bed2} > {output.txt}
        """

rule extract_uncovering_alignment_contigs_short:
    input:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.short.{sample}-contigs.cleared.sam"),
        txt = pjoin(outdir, "pp", "{over}", "nonhaplostrings.short.txt")
    output:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.short.{sample}-contigs.cleared.nonhaplo.sam")
    threads: 1
    shell:
        """
        python3 {sdir}/extract_subsam.py {input.sam} {input.txt} > {output.sam}
        """

rule extract_uncovering_alignment_contigs_long:
    input:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.long.{sample}-contigs.sam"),
        txt = pjoin(outdir, "pp", "{over}", "nonhaplostrings.long.txt")
    output:
        sam = pjoin(outdir, "pp", "{over}", "sspecific.long.{sample}-contigs.nonhaplo.sam")
    threads: 1
    shell:
        """
        python3 {sdir}/extract_subsam.py {input.sam} {input.txt} > {output.sam}
        """

rule plot_nonhaplo:
    input:
        uncovering_txt = pjoin(outdir, "pp", "{over}", "nonhaplostrings.txt"),
        haplosam = pjoin(outdir, "pp", "{over}", "sspecific.short.hg-haps.cleared.sam"),
        contigssubsam1 = pjoin(outdir, "pp", "{over}", "sspecific.short.hg-contigs.cleared.nonhaplo.sam"),
        contigssubsam2 = pjoin(outdir, "pp", "{over}", "sspecific.short.na-contigs.cleared.nonhaplo.sam")
    output:
        png = pjoin(outdir, "pp", "{over}", "nonhaploplot.png")
    threads: 1
    shell:
        """
        python3 {sdir}/analyze.py plotnonhaplo {input.uncovering_txt} {input.haplosam} {input.contigssubsam1} {input.contigssubsam2} {output.png}
        """
