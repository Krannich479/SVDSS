configfile: "config.yml"

import os
from os.path import join as pjoin

wdir = os.getcwd()

root = config["root"]
samples = config["samples"]
ref = pjoin(root, config["ref"])
known_vars = pjoin(root, config["vcf"])

"""
snakeroot
|-- CHS-PUR-YRI.assemblies.pangenome_hg38.20200508.all_variants.genotypes.vcf.gz
|-- CHS-PUR-YRI.assemblies.pangenome_hg38.20200508.all_variants.genotypes.vcf.gz.tbi
|-- HG00733_assembly1.fa
|-- HG00733_assembly2.fa
|-- HG00733.fq
|-- hg38.chroms.fa
|-- g38.chroms.fa.fai
|-- NA19240_assembly1.fa
|-- NA19240_assembly2.fa
'-- NA19240.fq
"""

# Output folders
pp = "pp"
step1 = "step1"
step2 = "step2"

# Some hardcoded parameters
thrs = 8
min_ab = 5
max_l = 500
sspecific_prefix = f"sspecific.minab_{min_ab}.maxl_{max_l}"

rule run:
    input:
        # preanalysis
        pjoin(root, "samples.len.png"),
        # ping-pong (pp) pipeline
        pjoin(root, pp, "sspecific.correlation.png"),
        # STEP 1 - contigs
        pjoin(root, step1, "al_by_errors.png"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.nal.png"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.2al_homo.txt"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.nal.png"),
        pjoin(root, step1, "new_precision.csv"),
        # STEP 1.1 - repeatmasker
        pjoin(root, step1, "repmask_hg.tbl"),
        pjoin(root, step1, "repmask_hg.png"),
        pjoin(root, step1, "repmask_na.tbl"),
        pjoin(root, step1, "repmask_na.png"),
        # STEP 2 - haplotypes
        pjoin(root, step2, "recall.csv"),
        pjoin(root, step2, "precision.csv"),
        pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.nal.png"),
        # Step 2b - uncovering
        pjoin(root, step2, "covering_plot.png"),
        # General stats
        pjoin(root, "stats.txt")


# pjoin(root, step2, "recbylen.png"),




###############################
### PING-PONG (pp) PIPELINE ###
###############################
rule nthits:
    input:
        sample = pjoin(root, "{sample}.fq")
    output:
        bf = pjoin(root, pp, "{sample}_nt_k31.bf")
    params:
        out_prefix = pjoin(root, pp, "{sample}_nt")
    log:
        time = pjoin(root, pp, "{sample}_nthits.time"),
        out = pjoin(root, pp, "{sample}_nthits.log")
    threads: thrs
    shell:
        """
        /usr/bin/time -vo {log.time} nthits -t {threads} -k 31 -c 2 -b 36 --outbloom -p {params.out_prefix} {input.sample} &> {log.out}
        """

rule ntedits:
    input:
        sample = pjoin(root, "{sample}.fq"),
        bf = pjoin(root, pp, "{sample}_nt_k31.bf")
    output:
        out_prefix = pjoin(root, pp, "{sample}_nt_edited.fa")
    params:
        out_prefix = pjoin(root, pp, "{sample}_nt")
    log:
        time = pjoin(root, pp, "{sample}_ntedit.time"),
        out = pjoin(root, pp, "{sample}_ntedit.log")
    threads: thrs
    shell:
        """
        /usr/bin/time -vo {log.time} ntedit -t {threads} -f {input.sample} -r {input.bf} -b {params.out_prefix} &> {log.out}
        """

rule pp_index:
    input:
        pjoin(root, pp, f"{samples[0]}_nt_edited.fq")
    output:
        pjoin(root, pp, f"{samples[0]}_nt_edited.fq.fmd")
    params:
        bin = pjoin(wdir, "..", "main")
    threads: 4
    log:
        time = pjoin(root, pp, f"index.time"),
        out = pjoin(root, pp, f"index.log")
    shell:
        """
        /usr/bin/time -vo {log.time} {params.bin} index {input} > {output} 2> {log.out}
        """

rule pp_search:
    input:
        index = pjoin(root, pp, f"{samples[0]}_nt_edited.fq.fmd"),
        sample = pjoin(root, pp, f"{samples[1]}_nt_edited.fq")
    output:
        directory(pjoin(root, pp, "sspecific"))
    params:
        bin = pjoin(wdir, "..", "main")
    threads: thrs
    log:
        time = pjoin(root, pp, "search.time"),
        out = pjoin(root, pp, "search.log")
    shell:
        """
        mkdir -p {output}
        pushd {output}  &> /dev/null
        /usr/bin/time -vo {log.time} {params.bin} sf3 {input.index} {input.sample} {threads} &> {log.out}
        popd &> /dev/null
        """

rule aggregate:
    input:
        indir = pjoin(root, pp, "sspecific")
    output:
        fq = pjoin(root, pp, "sspecific.fq")
    log:
        pjoin(root, pp, "aggregate.log")
    threads: 1
    shell:
        """
        ./scripts/aggregate {input.indir} > {output.fq} 2> {log}
        """

rule filter:
    input:
        pjoin(root, pp, "sspecific.fq")
    output:
        pjoin(root, pp, f"{sspecific_prefix}.fq")
    params:
        ab = min_ab,
        l = max_l
    threads: 1
    shell:
        """
        ./scripts/filter la {input} {params.ab} {params.l} > {output}
        """

rule plot_correlation:
    input:
        pjoin(root, pp, "sspecific.fq")
    output:
        pjoin(root, pp, "sspecific.correlation.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py corr {input} {output}
        """





##################################
### STEP 1: mapping to contigs ###
##################################
rule combine_contigs:
    input:
        fa1 = pjoin(root, "{sample}_assembly1.fa"),
        fa2 = pjoin(root, "{sample}_assembly2.fa")
    output:
        pjoin(root, "{sample}_assembly.fa")
    shell:
        """
        cat {input.fa1} {input.fa2} | reformat.sh in=stdin.fa out={output} uniquenames=t
        """

rule bbmap_index_contigs:
    input:
        pjoin(root, "{sample}_assembly.fa")
    output:
        directory(pjoin(root, "{sample}_assembly.bbmapindex"))
    threads: thrs
    log:
        time = pjoin(root, "{sample}_assembly.bbmapindex.time"),
        out= pjoin(root, "{sample}_assembly.bbmapindex.log")
    shell:
        """
        /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 ref={input} path={output} &> {log.out}
        """

rule bbmap_align_contigs:
    input:
        index = pjoin(root, "{sample}_assembly.bbmapindex"),
        fq = pjoin(root, pp, f"{sspecific_prefix}.fq")
    output:
        sam = pjoin(root, step1, f"{sspecific_prefix}." + "{sample}.sam")
    threads: thrs
    log:
        time = pjoin(root, step1, f"{sspecific_prefix}." + "{sample}.time"),
        out = pjoin(root, step1, f"{sspecific_prefix}." + "{sample}.log")
    shell:
        """
        /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 usequality=f ambiguous=all idtag=t path={input.index} in={input.fq} outm={output.sam} &> {log.out}
        """

rule clean_bbmap_1:
    input:
        sam = pjoin(root, step1, f"{sspecific_prefix}." + "{sample}.sam")
    output:
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared." + "{sample}.sam")
    shell:
        """
        python3 scripts/remove_bad_ambiguous.py {input.sam} > {output.sam}
        """

rule plot_step1:
    input:
        sam1 = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.sam"),
        sam2 = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.sam"),
        fq = pjoin(root, pp, f"{sspecific_prefix}.fq")
    output:
        png = pjoin(root, step1, "al_by_errors.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py albyerr {input.sam1} {input.sam2} {input.fq} {output.png}
        """

rule plot_nalign_bar_1:
    input:
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared." + "{sample}.sam")
    output:
        png = pjoin(root, step1, f"{sspecific_prefix}.cleared." + "{sample}.nal.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py nal {input.sam} {output.png}
        """

rule check_2alignments_1:
    input:
        fa1 = pjoin(root, f"{samples[0]}_assembly1.fa"),
        fa2 = pjoin(root, f"{samples[0]}_assembly2.fa"),
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.sam")
    output:
        txt = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.2al_homo.txt")
    threads: 1
    shell:
        """
        python3 scripts/check_2al_for_homo.py {input.fa1} {input.fa2} {input.sam} > {output.txt}
        """

rule extract_pmatches_NA:
    input:
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.sam")
    output:
        fa = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa")
    threads: 1
    shell:
        """
        python3 scripts/extract_al_by_err.py {input.sam} 0 fa > {output.fa}
        """

rule extract_notpmatches_HG:
    input:
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.sam")
    output:
        fa = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa")
    threads: 1
    shell:
        """
        python3 scripts/extract_al_by_err.py {input.sam} g0 fa > {output.fa}
        """

rule analyze_step1_precision:
    input:
        sam1 = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.sam"),
        sam2 = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.sam"),
        fq = pjoin(root, pp, f"{sspecific_prefix}.fq")
    output:
        txt = pjoin(root, step1, "new_precision.csv")
    threads: 1
    shell:
        """
        python3 scripts/analyze.py pre1 {input.sam1} {input.sam2} {input.fq} > {output.txt}
        """

rule repmask_HG:
    input:
        fa = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa")
    output:
        pjoin(root, step1, "repmask_hg", f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa.masked"),
        pjoin(root, step1, "repmask_hg", f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa.out")
    params:
        fold = pjoin(root, step1, "repmask_hg")
    log:
        out = pjoin(root, step1, "repmask_hg.log")
    threads: thrs
    shell:
        """
        RepeatMasker -e rmblast -pa {threads} -species human -dir {params.fold} {input.fa} &> {log.out}
        """

rule plot_repmask_HG:
    input:
        fa = pjoin(root, step1, "repmask_hg", f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa.masked"),
        rm_out = pjoin(root, step1, "repmask_hg", f"{sspecific_prefix}.cleared.{samples[1]}.notpmatches.fa.out")
    output:
        tbl = pjoin(root, step1, "repmask_hg.tbl"),
        png = pjoin(root, step1, "repmask_hg.png")
    params:
        minL = 0 # hardcoded
    threads: 1
    shell:
        """
        python3 scripts/plot.py repmask {input.fa} {input.rm_out} {output.png} {params.minL} > {output.tbl}
        """

rule repmask_NA:
    input:
        fa = pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa")
    output:
        pjoin(root, step1, "repmask_na", f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa.masked"),
        pjoin(root, step1, "repmask_na", f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa.out")
    params:
        fold = pjoin(root, step1, "repmask_na")
    log:
        out = pjoin(root, step1, "repmask_na.log")
    threads: thrs
    shell:
        """
        RepeatMasker -e rmblast -pa {threads} -species human -dir {params.fold} {input.fa} &> {log.out}
        """

rule plot_repmask_NA:
    input:
        fa = pjoin(root, step1, "repmask_na", f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa.masked"),
        rm_out = pjoin(root, step1, "repmask_na", f"{sspecific_prefix}.cleared.{samples[0]}.pmatches.fa.out")
    output:
        tbl = pjoin(root, step1, "repmask_na.tbl"),
        png = pjoin(root, step1, "repmask_na.png")
    params:
        minL = 0 # hardcoded
    threads: 1
    shell:
        """
        python3 scripts/plot.py repmask {input.fa} {input.rm_out} {output.png} {params.minL} > {output.tbl}
        """





#############################################################################
### STEP 2: mapping to haplotypes + checking overlaps with known variants ###
#############################################################################
rule build_haplotype:
    input:
        fa = ref,
        vcf = known_vars
    output:
        fa = pjoin(root, f"{samples[1]}." + "hap{h}.fa")
    params:
        sample = samples[1],
        hap = "{h}"
    threads: 1
    shell:
        """
        bcftools consensus -s {params.sample} -H {params.h} -f {input.fa} {input.vcf} > {output.fa}
        """

rule combine_haplotypes:
    input:
        fa1 = pjoin(root, f"{samples[1]}.hap1.fa"),
        fa2 = pjoin(root, f"{samples[1]}.hap2.fa")
    output:
        fa = pjoin(root, f"{samples[1]}_haplotypes.fa")
    threads: 1
    shell:
        """
        cat {input.fa1} {input.fa2} | reformat.sh in=stdin.fa out={output} uniquenames=t
        """

rule bbmap_index_haplotypes:
    input:
        pjoin(root, f"{samples[1]}_haplotypes.fa")
    output:
        directory(pjoin(root, f"{samples[1]}_haplotypes.bbmapindex"))
    threads: thrs
    log:
        time = pjoin(root, f"{samples[1]}_haplotypes.bbmapindex.time"),
        out= pjoin(root, f"{samples[1]}_haplotypes.bbmapindex.log")
    shell:
        """
        /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 ref={input} path={output} &> {log.out}
        """

rule bbmap_align_haplotypes:
    input:
        index = pjoin(root, f"{samples[1]}_haplotypes.bbmapindex"),
        fq = pjoin(root, pp, f"{sspecific_prefix}.fq")
    output:
        sam = pjoin(root, step2, f"{sspecific_prefix}.{samples[1]}.sam")
    threads: thrs
    log:
        time = pjoin(root, step2, f"{sspecific_prefix}.{samples[1]}.time"),
        out = pjoin(root, step2, f"{sspecific_prefix}.{samples[1]}.log")
    shell:
        """
        /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 usequality=f ambiguous=all idtag=t path={input.index} in={input.fq} outm={output.sam} &> {log.out}
        """

rule clean_bbmap_2:
    input:
        sam = pjoin(root, step2, f"{sspecific_prefix}.{samples[1]}.sam")
    output:
        sam = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam")
    shell:
        """
        python3 scripts/remove_bad_ambiguous.py {input.sam} > {output.sam}
        """

rule plot_nalign_bar_2:
    input:
        sam = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam")
    output:
        png = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.nal.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py nal {input.sam} {output.png}
        """

rule vcf2uniquehaplobeds:
    input:
        vcf = known_vars
    output:
        pjoin(root, step2, f"{samples[1]}_uniquevars_1.bed"),
        pjoin(root, step2, f"{samples[1]}_uniquevars_2.bed")
    params:
        sample1 = samples[1],
        sample2 = samples[0],
        out_prefix = pjoin(root, step2, f"{samples[1]}_uniquevars")
    shell:
        """
        python3 scripts/vcf2uniquehaplobeds.py {input.vcf} {params.sample1} {params.sample2} {params.out_prefix}
        """

rule vcf2haplobeds:
    input:
        vcf = known_vars
    output:
        known_vars + "_1.bed",
        known_vars + "_2.bed"
    params:
        sample1 = samples[1],
        sample2 = samples[0],
        out_prefix = known_vars
    shell:
        """
        python3 scripts/vcf2uniquehaplobeds.py {input.vcf} {params.sample1} {params.sample2} {params.out_prefix} all
        """

rule intersect_beds_for_recall:
    input:
        aligns = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam.bed"),
        vars1 = pjoin(root, step2, f"{samples[1]}_uniquevars_1.bed"),
        vars2 = pjoin(root, step2, f"{samples[1]}_uniquevars_2.bed")
    output:
        bed1 = pjoin(root, step2, "bedintersect", "uniquevars1_vs_sam.c.bed"),
        bed2 = pjoin(root, step2, "bedintersect", "uniquevars2_vs_sam.c.bed")
    threads: 1
    shell:
        """
        bedtools intersect -c -a {input.vars1} -b {input.aligns} > {output.bed1}
        bedtools intersect -c -a {input.vars2} -b {input.aligns} > {output.bed2}
        """

rule intersect_beds_for_precision:
    input:
        aligns = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam.bed"),
        vars1 = known_vars + "_1.bed",
        vars2 = known_vars + "_2.bed"
    output:
        bed1 = pjoin(root, step2, "bedintersect", "sam_vs_allvars1.wao.bed"),
        bed2 = pjoin(root, step2, "bedintersect", "sam_vs_allvars2.wao.bed")
    threads: 1
    shell:
        """
        bedtools intersect -wao -a {input.aligns} -b {input.vars1} > {output.bed1}
        bedtools intersect -wao -a {input.aligns} -b {input.vars2} > {output.bed2}
        """

rule analyze_step2:
    # TODO split in multiple rules
    input:
        bed_rec1 = pjoin(root, step2, "bedintersect", "uniquevars1_vs_sam.c.bed"),
        bed_rec2 = pjoin(root, step2, "bedintersect", "uniquevars2_vs_sam.c.bed"),
        bed_pre1 = pjoin(root, step2, "bedintersect", "sam_vs_allvars1.c.bed"),
        bed_pre2 = pjoin(root, step2, "bedintersect", "sam_vs_allvars2.c.bed")
    output:
        rec = pjoin(root, step2, "recall.csv"),
        pre = pjoin(root, step2, "precision.csv"),
        txt = pjoin(root, step2, "uncovering", "sspecific.txt")
        # png2 = pjoin(root, step2, "recbylen.png")
    params:
        txt = pjoin(root, step2, "uncovering", "sspecific.wclass.txt")
        # reclist = pjoin(root, step2, "recall.list.txt"),
        lvalue = 250
    threads: 1
    shell:
        """
        python3 scripts/analyze.py rec {input.bed_rec1} {input.bed_rec2} {params.lvalue} > {output.rec}
        python3 scripts/analyze.py pre {input.bed_pre1} {input.bed_pre2} > {params.txt} 2> {output.pre}
        cut -f 2 -d' ' {params.txt} > {output.txt}
        """
# python3 scripts/analyze.py reclist {input.i1} {input.i2} > {params.reclist}
# python3 scripts/plot.py recbylen {params.reclist} {output.png1}





################################################################
### Step 2b: specific strings not covering a known variation ###
################################################################

rule extract_uncovering_fq:
    input:
        fq = pjoin(root, pp, f"{sspecific_prefix}.fq"),
        txt = pjoin(root, step2, "uncovering", "sspecific.txt")
    output:
        fq = pjoin(root, step2, "uncovering", "sspecific.fq")
    threads: 1
    shell:
        """
        python3 scripts/extract_subfq.py {input.fq} {input.txt} > {output.fq}
        """

rule extract_uncovering_alignment_contigs:
    input:
        sam = pjoin(root, step1, f"{sspecific_prefix}.cleared." + "{sample}.sam"),
        txt = pjoin(root, step2, "uncovering", "sspecific.txt")
    output:
        sam = pjoin(root, step2, "uncovering", "sspecific.{sample}.sam")
    threads: 1
    shell:
        """
        python3 scripts/extract_subsam.py {input.sam} {input.txt} > {output.sam}
        """

rule plot_uncovering_al_by_err:
    input:
        uncovering_txt = pjoin(root, step2, "uncovering", "sspecific.txt"),
        haplosam = pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam"),
        contigssam1 = pjoin(root, step2, "uncovering", f"sspecific.{samples[1]}.sam"),
        contigssam2 = pjoin(root, step2, "uncovering", f"sspecific.{samples[0]}.sam")
    output:
        png = pjoin(root, step2, "covering_plot.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py cov {input.uncovering_txt} {input.haplosam} {input.contigssam1} {input.contigssam1} {output.png}
        """

# rule bbmap_index_reference:
#     input:
#         pjoin(root, "hg38.chroms.fa")
#     output:
#         directory(pjoin(root, "hg38.chroms.fa.bbmapindex"))
#     threads: thrs
#     log:
#         time = pjoin(root, "hg38.chroms.fa.bbmapindex.time"),
#         out= pjoin(root, "hg38.chroms.fa.bbmapindex.log")
#     shell:
#         """
#         /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 ref={input} path={output} &> {log.out}
#         """

# rule bbmap_align_uncovering_to_reference:
#     input:
#         index = pjoin(root, "hg38.chroms.fa.bbmapindex"),
#         fq = pjoin(root, step2, "uncovering", "sspecific.fq")
#     output:
#         sam = pjoin(root, step2, "uncovering", "sspecific.sam")
#     threads: thrs
#     log:
#         time = pjoin(root, step2, "uncovering", "sspecific.time"),
#         out = pjoin(root, step2, "uncovering", "sspecific.log")
#     shell:
#         """
#         /usr/bin/time -vo {log.time} bbmap.sh threads={threads} k=11 usequality=f ambiguous=all idtag=t path={input.index} in={input.fq} outm={output.sam} &> {log.out}
#         """
        




#############
### utils ###
#############
rule fa2fq:
    input:
        "{fpath}.fa"
    output:
        "{fpath}.fq"
    threads: 1
    shell:
        """
        reformat.sh in={input} out={output} qfake=93
        """

# rule sam2bam:
#     input:
#         sam = "{fpath}.sam"
#     output:
#         bam = "{fpath}.bam",
#         bai = "{fpath}.bam.bai"
#     threads: 1
#     shell:
#         """
#         samtools view -bS {input.sam} | samtools sort > {output.bam}
#         samtools index {output.bam}
#         """

rule sam2bed:
    input:
        "{fpath}.sam"
    output:
        "{fpath}.sam.bed"
    shell:
        """
        python3 scripts/sam2bed.py {input} > {output}
        """

rule plot_samples_len:
    input:
        fq1 = pjoin(root, f"{samples[1]}.fq"),
        fq2 = pjoin(root, f"{samples[0]}.fq")
    output:
        pjoin(root, "samples.len.png")
    threads: 1
    shell:
        """
        python3 scripts/plot.py lsamples {input.fq1} {input.fq2} {output}
        """

rule get_stats:
    input:
        pjoin(root, pp, f"{sspecific_prefix}.fq"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[0]}.sam"),
        pjoin(root, step1, f"{sspecific_prefix}.cleared.{samples[1]}.sam"),
        pjoin(root, step2, f"{sspecific_prefix}.cleared.{samples[1]}.sam"),
        pjoin(root, step2, "uncovering", f"sspecific.{samples[1]}.sam"),
        pjoin(root, step2, "uncovering", f"sspecific.{samples[0]}.sam")
    output:
        pjoin(root, "stats.txt")
    params:
        root
    threads: 1
    shell:
        """
        pushd scripts
        bash get_stats.sh {params} > {output}
        popd
        """
